MYSQL配置文件
  1.二进制日志文件 log-bin ：  将主机的修改记录下来,用于主从复制使用
  2.错误日志log-error：默认关闭 记录严重的警告和错误信息,每次启动和关闭的详细信息
  3.查询日志log：默认关闭,记录查询sql语句,开启会降低mysql整体性能
  4.数据文件
     window：mysql文件夹下data目录中
     linux：var/lib/mysql/目录中
     1.frm文件：存放表结构
     2.myd文件：存放表数据
     3.myi文件：存放表索引
     /var/lib/mysql/  存放mysql数据库文件
     /usr/share/mysql/  存放mysql配置文件
安装Mysql 首次设置密码： grant all privileges on *.* to 'root'@'%' identified by '123456';
设置外部访问权限：GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;
一主一从主从复制：
 1.主机将所有修改的操作存到binlog日志中
    1.binlog三种格式
 2.从机读取binlog日志 然后将 binlog日志写入到 Relay Log中继日志中 然后执行到从机中
 3.主从复制不是不跟主机直接关联,只需要看上次binlog日志的位置就好  延时性问题
    1.主机配置：   主从关系是在运行的时候通过第五步授权配置的
       1.修改配置文件  vim /etc/my.cnf
       2.server-id=1                           主服务器唯一ID
       3.log-bin=mysql-bin                     启用二进制日志
       4.binlog-ignore-rdb=mysql               设置不要复制的数据库(可设置多个)   复制数据库和不要复制数据库互斥 只能保留一个
       5.binlog-do-db=                         设置需要复制的数据库
       6.binlog_format=STATEMENT               设置binlog格式
    2.从机配置
       1.server-id=2                           主服务器唯一ID
       2.relay-bin=mysql-relay                 启用二进制日志   todo：加上会报错
    3.重启MYSQL： systemctl restart mysql   ||service mysql start   查看重启状态和时间：  systemctl status mysql  ||service MySQL stop
    4.关闭防火墙或者开放端口  ---》查看关闭防火墙：  systemctl status firewalld
    5.在主机MYSQL中给从机授权
       1.grant replication slave on *.* to 'copy'@'%'IDENTIFIED BY'123456';  创建一个copy用户 密码是123456 授权为可复制
       2.show master status;   查看主机
    6.在从机配置  复制主机命令  。  如果设置过  先停止stop slave, 然后 reset master   最后再次运行命令就可以重新复制主机
       1.change master to master_host='192.168.47.130', master_user='copy', master_password='123456', master_log_file='mysql-bin.000016', master_log_pos=107;
    7.start slave；将从机复制服务提起来   如果不想继续复制 ： stop slave；；停止
    8.show slave status\G;查看状态  slave IO和SQL running 是否都是yes  如果是则成功
双主双从主从复制：
    log-slave-updates                     # 在作为从数据库的时候，有写入操作也要更新二进制日志文件
    auto-increment-increment=2            #表示自增长字段每次递增的量，指自增字段的起始值，其默认值是1，取值范围是1 .. 65535
    auto-increment-offset=1               # 表示自增长字段从哪个数开始，指字段一次递增多少，他的取值范围是1 .. 65535
    insert into user values (6,@@hostname);

------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
为什么要用MyCat？
数据库中间件：
  Cobar 停止维护,Mycat解决cobar中存在的问题,并加入了许多功能。
Mycat作用：
 1.读写分离
   不用中间件,首先Java需要有Mysql集群的配置信息,并且需要判断语句是读还是写从而选取使用数据库。
   使用Mycat中间件,不需要java程序管是读还是写,由Mycat去决定访问那个数据库,
 2.数据分片
   1.水平拆分(分表)
     将单张表的数据进行水平拆分,放入多个数据库,有中间件去处理sql具体去哪个数据库找数据
   2.垂直拆分(分库)
     将数据库拆分成多个数据库,每个数据库中存不同的表,环境数据库压力
   3.分库分表方案
      1.本地
         1.java代码实现
         2. shardingsphere实现
      2.代理
         1.mycat
 3.多数据源整合
   1.可以接入NOsql数据库。Redis
   2.可以配置Mysql主从故障切换
   3.配置mysql集群
MyCat原理：  拦截
  拦截用户发来的SQL,对SQL做特定分析,如：分片分析,路由分析,读写分离分析,缓存分析.然后将SQL发往真实数据库,并将返回结果适当处理,
  如：结果合并,聚合处理,分页处理,排序处理,最后返回给用户。  将数据库和Java程序进行解耦
Mycat配置文件：
 1.schema.xml:定义逻辑库,表，分片节点等内容
 2.rule.xml：定义分片规则
 3.server.xml：定义用户以及系统相关变量,如端口等
   修改用户root账户密码(逻辑库名称)
Mycat启动：
 1.控制台启动：./mycat console   可以看日志,帮助解决启动失败问题
 2.后台启动： ./mycat start
 3.登录后台管理窗口：mysql -u mycat -p mycat -h 192.168.47.130 -P 9066   用于运维维护mycat
 4.登录数据窗口：mysql -u mycat -p mycat -h 192.168.47.130 -P 8066
Mycat读写分离：
  设置schema.xml文件中《datahost》标签
      1.balance属性    双主双从设置1
        1.等于0: 不开启读写分离机制,所有读写操作都在主机完成
        2.等于1：双主双从模式下。 写主机负责写,备机和两个读主机 负载均衡读
        3.等于2：所有读请求随机分发在读主机或写主机上
        4.等于3：所有读请求随机分发到读主机。
      2.writeType属性 ： 默认0
        1.等于0：全部写操作发送到配置的第一个写主机,第一个挂了切换到第二个写主机
        2.等于1：全部写操作随机发送到配置的写主机  1.5以后废弃 不推荐
      3.switchType属性：默认 1
        1.等于1：自动切换
        2.等于-1：不自动切换
        3.基于MYsql主从同步的状态进行切换
Mycat垂直分库：
  一个数据库中多张表,将表按照一定规则进行分类,分布到多台主机上面,这样可以将压力分担到多台数据库
     注意：不同主机不能使用关联查询。所以分布在不同主机上的表必须没有关联关系
Mycat水平分表：











binlog 日志级别







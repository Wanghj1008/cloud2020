1.Redis为什么这么快？
  1.Redis基于内存,不需要磁盘IO操作
  2.Redis数据结构简单,是KEY-VALUE形式,查询时间复杂度O(1)
  3.单线程设计,直接绑定CPU,避免线程切换带来时间开销。--》新版引入多线程可以支持的网络 I/O 多线程模块
  4.多路复用IO：Redis多线程8题
2.如果大量的KEY设置了同一个过期时间,一般需要注意什么？
  如果大量key同时过期,过期点可能出现短暂的卡顿,严重可能出现缓存雪崩,一般在时间上加一个随机值,让过期时间分散
3.那你使用过Redis分布式锁么，它是什么回事？
  先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。
4.如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？
  这个锁就永远得不到释放了，我记得set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！
5.假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？
  使用keys指令可以扫出指定模式的key列表。
6.如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？
  keys指令阻塞线程一段时间,直到指令执行完毕,服务才能恢复。
  scan指令可以无阻塞的提取出指定模式的key列表,但是有重复概率,需要客户端去重。并且需要时间比keys指令长
7.使用过Redis做异步队列么，你是怎么用的？
  一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。
8.如果对方追问可不可以不用sleep呢？
  list还有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。  但是只有一个客户端可以消费消息
9.如果对方接着追问能不能生产一次消费多次呢？
  使用publish/subscribe主题订阅者模式，可以实现 1:N 的消息队列。
10.如果对方继续追问 pub/su b有什么缺点？
  客户端不能退出,退出后消息接收失败,而且消息没有持久化,后订阅接收不到前面发布的消息
11.如果对方究极TM追问Redis如何实现延时队列？
  使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。
-----------------------------------------------------------------------------------------------------
1.Pipeline有什么好处，为什么要用pipeline？
  可以将多次IO往返的时间缩减为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是pipeline批次指令的数目。
2.对方追问RDB的原理是什么？
  fork和cow。fork是指redis通过创建子进程来进行RDB操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。
3.是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？
  Redis Sentinal 着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。
  Redis Cluster 着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。
4.如果突然断电，数据能恢复多少？
  如果AOF是每条都sync同步到磁盘则不丢失数据,保证高性能一般都是每秒同步一次,这个时候会丢失几秒数据
























































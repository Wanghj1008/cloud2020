来讲讲什么是注解？
   1.代码中的特殊标记,可以在编译,加载,运行时执行相应的处理    原生@Overried、@FunctionalInterface
   2.自定义注解自动继承 Annotation(元注解),
   3.元注解专门的一些注释
       1.@Target ：用来限定注解的位置,比如接口,属性,方法等  一般来说使用方法
       2.@Retention：用来表示注解的生命周期,包括 源文件阶段、编译到class阶段、运行阶段       默认CLASS
            源文件阶段：不会参与到编译和运行 一般就是注释作用
            编译到class阶段：编译期间可能会做一些处理,运行期读不到    Lombok就是这个编译阶段完成的get\set方法嵌入  继承一个类实现方法
            运行阶段：一般配合AOP 通过反射获取到注解然后执行相应的操作
       3.@Documented注解，是被用来指定自定义注解是否能随着被定义的java文件生成到JavaDoc文档当中。
       4.@Inherited注解，是指定某个自定义注解如果写在了父类的声明部分，那么子类的声明部分也能自动拥有该注解。@Inherited注解只对那些@Target被定义为ElementType.TYPE的自定义注解起作用。
你对泛型有多少了解？
   1.代码更加简洁,程序更加健壮(如果有类型转换异常编译会报错),平时在集合经常使用泛型.
   类型擦除：在字节码中实际存储和取出都是使用的Object,在取出时进行类型强转
   只支持封装类型,不能使用基本数据类型











5中IO模型和零拷贝










































































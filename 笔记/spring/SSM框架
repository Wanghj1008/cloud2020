SpringMVC：
    拦截用户请求,DispatcherServlet承担中介职责将用户请求通过HandlerMapping去匹配controller,然后controller执行具体操作
Mybatis：
    是对jdbc的封装,通过配置文件关联到实体类Mapper文件,mapper中配置 sql的映射。每次交互中通过sqlSessionFactory拿到一个sqlSession，再执行sql命令

架构分层：
    1.视图层：视图层和控制层结合紧密,视图层主要是页面的展示
    2.控制层：控制要调用的业务层代码
    3.业务层：业务代码的逻辑处理，可能会涉及到持久层接口的调用
    4.持久层：负责与数据库交互,进行CRUD的操作
SSM原理流程：
    1.客户端发送请求到DispatcherServlet
    2.DispatcherServlet控制器查询HandlerMapping,找到对应Controller
    3.Controller调用Service进行业务处理,处理中可能涉及到去DAO进行数据库操作。最终将响应返回给客户端
低耦合高内聚： https://blog.csdn.net/ws9029/article/details/116454153
    低耦合：模块和模块之间交互不可避免,交互性低也就是耦合低才能让模块直接增加独立性。实现多模块可拆卸
    高内聚：功能内聚,一个模块只需要做自己负责的事情,不过分关心其他事情。 保证模块拆卸过程中对功能控制的精准性
    总结：低耦合高内聚的思想其实就是将系统分成多个模块分而治之的思想。对系统来说将会有更高的可靠性.系统升级微服务也轻松一些
Spring： 开源的轻量级框架,简化应用程序开发,降低耦合度。
    1.IOC(控制反转):让Spring帮助创建对象以及管理对象之间的依赖关系,降低对象间耦合度
         容器初始化过程：
             1.XML方式
                 1.创建 ClassPathXmlApplicationContext 调用构造方法时,
                      一、先是调用顶层父构造方法对部分属性初始化
                      二、调用父类setConfigLocations设置传入属性值,Spring配置文件路径
                      三、调用父类refresh方法对xml中bean进行载入封装
                           1.判断是否存在Spring容器,存在销毁然后创建,保证refresh创建的时新的容器
                           2.通过路径将XML解析成文档对象,然后封装程key-value存入一个Map中,这个过程加锁保证线程安全. key为String value为BeanDefinition（内部封装 单例、多例、参数）
             2.注解方式
                 1.配置自动扫描路径,启动时会根据路径对所有类进行扫描
                 2.直接将含注解的bean注册到容器中
         Bean实例化参数配置：
             1.scope
                  1.singleton：单例 ：Spring创建就会被加载,生命周期和Spring一致。
                  2.prototype：多例 ：对象被使用时候才加载,不使用就会被GC回收
                  3.request：请求,每次HTTP请求都会生成一个bean,表示在一次HTTP内有效
                  4.session：在同一个session内,使用一个bean
                  5.global session：在一个全局session内 使用一个bean
             2.id、class：id自定义一般为类开头字母小写、class为全路径名
             3.init-method 初始化方法
             4.destroy-method 销毁方法
         Bean实例化方式
             1.无参构造
             2.工厂静态方法
             3.工厂实例方法
         依赖注入： 优点:将对象的依赖关系交给容器自动化完成,解耦合    缺点：实例bean源码复杂,不易学习。 通过反射创建对象有损耗,但是从便利性和实用性这点损耗可以忽略
             1.构造方法：优点：自动寻找bean进行注入 缺点：可能存在多个构造方法,不方便维护。 但是IDEA仍然推荐这种方法进行代码书写
             2.setter方法：优点：可以继承、设置默认值、用的时候进行注入  缺点：无法在对象构造完成后立刻使用 需要调用set方法
             3.接口注入：使用较少,因为强制被注入对象实现接口
             4.P指针注入(本质就是set)：配置文件使用较多 优点：代码整洁  缺点：可维护性不高,如果属性多会导致配置过长
         依赖注入注解：
             1.Autowired
             2.Qualifier
             3.Resource
             4.Value：⽤于注⼊基本数据类型和 String 类型
    2.AOP(切面编程):
    3.事务控制
    4.方便集成测试
    5.降低API使用难度,对很多API进行封装提供Template调用












































Spring：轻量级框架,以IOC和AOP为核心
1.IOC低耦合高内聚2.AOP面向切面变成3.事务的控制4.方便集成测试5.方便集成其他优秀框架6.降低API使用难度,Spring对很多API进行封装提供Template
IOC控制反转：把对象的创建权交给Spring
XML方式：
Bean的配置：id自定义 class类的全路径名  init-method 初始化方法  destroy-method 销毁方法
ApplicationContext.getBean两种方式 一种通过id   一种通过字节码文件。。如果bean注入两次通过字节码会报错。无法判断要哪个
  实例化三种： 无参构造                 <bean id="userDao" calss="com.whj.dao.UserDao"/>
                需要现有一个StaticFactory类 然后里面有一个静态的getUserDao方法
              工厂静态方法             <bean id="userDao" class="com.whj.dao.StaticFactory" factory-method="getUserDao"/>
                需要现有一个StaticFactory类 然后里面有一个getUserDao方法   这样就不能直接类名.方法调用 需要先实例创建StaticFactory
              工厂实例方法             <bean id="factory" calss="com.whj.dao.StaticFactory"/>
                                      <bean id="userDao" factory-bean="factory" factory-method="getUserDao"/>
scope作用范围
singleton：单例    如果是单例则在加载xml配置文件时,bean就被创建  只要Spring容器在对象就一直活着，容器销毁对象才销毁
prototype：多例    如果是多例则在加载xml配置文件时不创建bean。getBean的时候才创建,get一次创建一个 只要对象在使用就活着,长时间不使用会被GC回收
request：web项目中，Spring创建一个Bean的对象，将对象存放到request域中
session：web项目中，Spring创建一个Bean的对象，将对象存放到session域中
global session：web项目中，应用在Portlet环境,如果没有这个环境,那么相当于session
依赖注入：
    set方法注入
    有参构造注入
    P指针注入：一般还是用set因为这个多了很长不好看
引入其他文件：<import resource="aaalication-dao.xml"/>
注解方式：
@Autowired:直接去寻找类型的bean但是如果相同类型bean有多个会出错。不知道要哪个
@qualifier("id"):根据id去容器寻找一样的bean 但是需要配合Autowired一起使用
@Resource:相当于Autowired+qualifier
@ComponentScan:指定扫描包
@import:配置文件加载其他分支配置文件
@propertyResource：用于加载.properties的文件

整合junit：
@RunWith("SpringJunit4ClassRunner.class")
@ContextConfiguration("classpath:application.xml") 或者不用xml用核心配置类@ContextConfiguration("class={Config.class}")

SpringMvc:
缺点：servlet中每次都需要创建Spring容器加载application
改进：将创建加载的过程交给监听器。容器启动就加载配置文件。ContextLoaderListener存放WebApplicationContextUtil取
前端控制器：统一处理请求。在配置时候需要把SpringMvc配置文件读取进去
配置视图解析器：默认转发可以换成重定向。加前缀后缀
返回字符串：@ResponseBody 但是如果是实体类需要加<mvc:annotation-driven>      mvc注解驱动
请求：获取集合参数 1.使用VO包装接收 2.如果是ajax请求 可以直接用@RequestBody List<User>接收
开放静态资源:<mvc:resources mappingL="/js/**" location="/js/"/>   或者：<mvc: default-servlet-handler/>
@RequestParam(value="name",defaultValue="whj")



 Mybatis：是持久层框架,简化开发使开发者不用关注创建链接等操作,只需要关注SQL语句。
       使用ORM(对象映射关系)思想
           ORM：就是把数据库和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库
注意事项：XML的mapper标签namespace值为接口全限定类名
         接口名为XML的id值
         接口的包路径和XML包路径保持一致




--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
MQ(MessageQuene) 消息队列
       通过生产者和消费者模型,生产者不断向消息队列中发消息,消费者不断从消息队列中拿消息,因为消息的生产和消费都是异步进行的,而且
       只需要关心消息的发送和接收,实现系统解耦.  别名消息中间件,利用高效的消息传递机制进行平台无关的数据交流。

1.ActiveMQ
   Apache出品,是比较老牌的消息中间件,但是性能不太好。
2.kafka
   Apache出品,追求高吞吐量,但是对事务,消息重复，丢失，错误没有严格要求,所以在大数据领域追求速度用的比较广
3.RocketMQ
   阿里开源消息中间件.借鉴kafka高吞吐,高可用。他对消息的可靠传输及事务做了优化,但是对事务的优化版本需要收费
4.RabbtiMQ
   使用erlang语言开发的消息队列,基于AMQP协议实现。AMQP主要特征就是面向对象、队列、路由、可靠性、安全。AMQP协议更多在企业系统内对数据一致性
   可靠性和稳定性要求很高的场景,即使数据丢失了也可以恢复,对性能和高吞吐量要求还在其次。和Spring框架无缝整合


------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
JVM(c写的)： 和操作系统
   硬件系统---》操作系统(window，linux,max)---->JRE(JVM)
   java文件---javac---》class文件---》类加载器(CLass Loader)---》java虚拟机运行时数据区（
                      1.方法区：method Area (JVM调优)
                      2.虚拟机栈：VM stack
                      3.本地方法栈：Native Method Area
                      4.堆：heap  (JVM调优)
                      5.程序计数器：compute
                      ）---》
      执行引擎:
          一般的插件都是在执行引擎上操作的
           本地库接口     本地方法库
   类加载器：            new Student()  引用放在虚拟机栈中 具体的人实例在堆中
      加载Class文件
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
Redis
90年代：使用单机数据库 +静态html页面。  访问量不大  单个数据库足够使用
        1.数据量总大小 一个机器放不下 ----》300w必须创建索引
        2.数据的索引（B+ Tree）一个机器的内存放不下时
        3.访问量多(读写混合)--》一个服务器受不了
        16G内 存能放下大概 2000W 行数据的索引，  简单的读和写混合访问量3000/s左右没有问题，
Memcached（缓存）+MySQL + 垂直拆分
        1.网站80%都在查询。每次操作数据库十分麻烦,为减轻数据库压力。可以使用缓存
        2.但是数据量大了还是会出现最初内存不够  访问量大无法承受的问题
读写分离：主库承担写的压力，分库承担读的压力
        1.对于读多写的少  适用
        2.写入量大  会造成主库无法承受
水平拆分：数据量变成1/n,,可以提高并发量和稳定性
        1.分片式事务不好解决
        2.跨库join性能降低。而且维护难度提高。
云数据库：
缓存适用于数据变动不大。但是像用户日志。数据量大变动又快的东西 关系型数据库就不适用了



MySQL
    优点：1.实现数据的持久化,方便查询
    缺点: 1.增加了开发合运维的难度,要学习SQL编写,数据库调优等
2.SQL语句名词
    1.DQL：数据库查询语言(由select组成的查询语言)
    2.DML：数据库操作语言(insert、update、delete)
        1.insert into from 表名 Values(字段名)
        2.delete from 表名 where 条件
        3.update 表名 set 字段名 = 值,字段名 = 值
    3.DDL：数据库定义语言(主要是库表的增删改操作)
        1.列级约束：直接在字段名和类型后面追加即可：非空 主键  唯一 默认
             1.主键  primary key  2.非空  not null  3.唯一  unique  4.默认  default
        2.表级约束：只有外键用表级
             6.外键  foreign key References
    4.DCL：数据控制语言(授权、创建用户,关闭事务自动提交等)
    5.TCL：事务控制语言(多个sql语句组成一个执行单元 要么都成功要么都失败)
        1.事务的属性：ACID
            1.原子性【atomic】：一个事务是一个不可拆分的整体。
            2.一致性【consistency】：执行前后数据一致
            3.隔离性【isolation】：多个事务之间不干扰
            4.持久性【durability】：事务一旦提交永久保存
        2.set autocommit=0 关闭事务自动提交,执行完毕commit提交事务,发生异常rollback回滚事务,通过savepoint设置保存点,让事务回滚到某个点
3.Delete 和 truncate区别
    1.delete删除表数据,可以进行条件删除,可以回滚,新增数据主键继续增加
    2.truncate清空所有表数据,不可回滚并且执行效率比delete高,主键信息也会清空,新增从1开始
4.主键和唯一的区别？ 外键
    1.不重复不为空,允许组合主键
    2.不重复可以为空,允许组合唯一
    3.外键可以和其他表建立联系(一对一、一对多等)
5.数据库字段类型
    1.整形：Tinyint(1字节)  smallint(2)  mediumint(3)  int/Integer(4)   bigint(8)  如果超过范围插入的是临界值,
    2.小数：浮点型：float  double(无默认)    定点型：decimal 默认(10,0)                   默认都有两个参数 一个长度一个保留几位小数
    3.字符型：char  varchar(长度可变)
6.SQL注意事项
    1.字段名使用着重号`name`,否则可能与关键字冲突
    2.起别名：最好双引号
    3.Group By：尽量分组前使用where,避免分组后having降低性能
    4.+号只能操作数值,所以会存在类型转换,不能转换则使用0,存在null则结果为null
7.MYSQL中包含的函数
    1.求和(sum)、求平均(avg)：处理数值型,字符按0处理,忽略null     注意：sum、avg、max、min都需要在业务层处理空指针
    2.最大(max)、最小(min) ：支持数字、日期、字符串比较,忽略null   注意：字符串比较按首字母比较所以9>10 解决：max(age+0)进行类型转换
      判断：if(true,1,0)   如果为null输出：ifnull(字段,想要的值)   取余(mod)   0-1取随机值：Rand   范围判断：between and

    3.字母转换大写(upper)  字母转换小写(lower)  截取(subString):索引从1开始截取几个字符  包含(inString)：找不到返回0,找到返回首位下标
      去空格(trim)--> trim('a' from "abbbva")去除指定字符'a'    去重(DISTINCT)  反转(reverse)  拼接(concat)  concat_ws('-',"A","B","C") -->A-B-C  用-拼接
      替换(Replace)  返回字节长度utf8(3字节)GBK|utf16(2字节)(Length)   LPad|RPad(字段,长度,填充): 不足长度填充,超过长度截取   截断：truncate
      like： 查询第三个字符为a第五个字符为b的：'__a_b%'  查询包含a和e且a在e前面：'%a%e%'   查询第二个字符为_的：'_\_%'
          补充：select * from user  和select * from user where age like '%%'查询结果一样吗？   不一样,如果为null模糊查询查询不到

    4.ignore： insert ignore into actor values ('3','ED','CHASE')    主键重复会忽略,不重复插入
    5.向上取整：ceil  向下取整：floor  四舍五入保留两位小数:round("字段",2)

    6.现在日期+时间：now()   现在日期不含时间:curdate()  当前时间不含日期:curtime()  返回两个日期之差(天):dateDiff(日期1,日期2)
      String转换date：str_to_date('2016-01-01',"%Y-%m-%d")   加十天：addDate(时间,Interval 10 day)  加2小时10分10秒：addTime(时间,"2:10:10")
    7.date_format(now(),"%Y-%m-%d")
         format:规则
         %Y:显示四位  %y: 只显示后两位
         %M:月份英文  %m：月份阿拉伯(01-12) %c:月份阿拉伯(1-12)
         %d:阿拉伯显示(00-31)  %D:带有英文后缀(1st-31th)  %e:阿拉伯显示(1-31)  %j:—年的天(001-365)

    8.MYSQL8以后增加了窗口函数： 用于排序增加序号1-N
        1.row_number()over(Order by 字段 asc) ： 相同值序号不相同,没有并列第一,会按照自然顺序排1和2
        2.rank()over(Order by 字段 asc)       :  相同值序号相同, 存在并列第一,理论上第二会变成3名
        3.dense_rank()over(Order by 字段 asc) :  相同值序号相同, 存在并列第一,理论上第二名还是第二
8.count(*) && count(1):
    1.count(列名)：遍历整张表把该列取出来,不为null进行+1
    2.count(1): 遍历整张表不取值放1进去,所以效率一般比count(列名高)
    3.count(*): 优化器进行了优化,遍历整张表不取值直接进行行累加,所以一般来说都使用count(*)
        补充：Myisam额外保存了行总数,如果不增加where条件count(*)很快,Innodb的mvcc需要采用版本号进行可见性判断所以需要进行判断累加
9.多表的连接情况
    1.交叉连接(笛卡尔积): 表1有n列表2有m列.输出结果=n*m
        1.sql92： select * from emp,dept
        2.sql99： select * from emp cross join dept
    2.内连接：下述为sql92写法,若更改sql99只需要在关联表增加 inner join
        1.等值连接：         select * from user,job   where user.jobId=job.id
        2.非等值连接：       select * from user,ageI  where user.age between ageI.min and ageI.max;
        3.自连接:           select a.name,a.id,b.name,b.id from user a,user b where a.manager.id=b.id
    3.外连接：
        1.左外连接          left outer join
        2.右外连接          right outer join
        3.全外连接          full outer join    内连接结果+表1有表二没有的+表2有表1没有的    MYSQL不支持全外连接
    4.sql92 ： 只支持内连接     sql99 ：支持内连接+外连接(左外和右外)+交叉连接   不支持全外连接
10.视图：  虚拟表，是通过普通表动态生成的数据  和普通表一样使用
    只保存sql逻辑,不保存查询结果     应用场景：多个地方用到相同的查询结果   2.该查询结果使用的sql较复杂
    创建：create view 视图名 as  sql语句     使用就是  select * from  视图民  where  条件
    修改：1.create or replace view 视图名 as 查询语句   2.alter view 视图名 as 查询语句
    删除视图：drop view  视图名,视图名
    好处：1.实现了sql重用  2.简化了复杂sql编写   3.保护数据 提高安全性
    简单视图也可以进行增删改，而且会修改原始表。 具备distinct,group by,join,合并就不能更新了
11.视图和表
    1.create view     占用空间保存sql逻辑   可以使用基本增删改查     视图sql逻辑中包含去重,组合,分组等不允许增删改
    2.create table    占用空间保存数据      可以使用增删改查
12.变量：
    1.系统变量
        1.全局变量：show global variables like ‘变量名’        set global 变量名 = ‘值’
        2.会话变量：show 【session】 variables like ‘变量名’        set 【session】 变量名 = ‘值’
    2.自定义变量
        1.用户变量：set @名:=值       使用select @变量名;
        2.局部变量：declare 名 类型 default 默认值；   使用select 变量名;
13.mysql自增值保存策略？
    myisam自增值保存在数据文件中的
    innodb在启动的时候通过redo log日志中查询最大值然后维护到内存
    自增修改机制？
        1.如果id为null或未指定值,会将自动维护的值设置为当前ID
        2.如果传入值存在ID,分情况处理
            1.传入值>=自增值,需要更新自增值到当前值
            2.传入值<自增值,自增值不变
    mysql自增不连续问题？
        1.如果插入数据其他字段存在唯一列导致插入失败,自增值会+1,下次插入会导致不连续
        2.如果事务回滚,会导致不连续
        3.批量插入主键不连续
    MYSQL5.1引入新配置(innodb_autoinc_lock_mode),可以通过配置改变申请主键的锁范围,默认1
        配置0->5.0之前的策略,语句执行结束才释放锁,可以进行回退主键,并发性能低
        配置1->1.普通insert,申请完后立马解锁   2.insert...select之类插入,等语句执行完才释放锁
            普通insert无论后面多少value都可以计算出需要的自增ID,所以会一次性申请
            insert...select不知道要申请多少,如果申请多一个一个申请会降低性能,所以增加了申请优化
                1.第一次申请分配1个,第二次申请分配2个,第三次申请分配4个....一直扩大两倍,所以当我们批量插入4个的时候实际分配了8个自增ID,也是导致不连续的问题之一
        配置2->所有申请后都释放锁
14.mysql中死锁问题？
    两个事务获取锁后想要访问对方加锁数据导致死锁
    解决：1.增加超时时间,超时后自动释放   2.增加死锁检测,发生死锁后自动回滚其中一个事务设置睡眠时间然后重试,让另一个先执行
15.DATETIME和TIMESTAMP区别
    datatime能保存1001~9999年,精度秒,他把日期和时间封装到一个整数,八个字节保存。 和时区无关
    timestamp能保存1970~2038年,四个字节存储并且依赖时区,通常需要减8小时
16.MYSQL为什么不推荐使用Join和子查询？
    子查询会产生临时表,性能低。
    Join当数据量比较大的时候性能不高并且当分库分表时,跨数据库使用Join性能更低
17.不使用Join如何解决管理查询？ //todo 2023.04.17
    1.逻辑层将Join拆分成两次查询,用IN来代替关联查询   注：order by,group by等聚合函数也是同等逻辑,先在自身库完成排序后通过逻辑层处理
    2.设置一些冗余字段,或者设置一些全局表每个库保存
    优势：1.逻辑层可以有更好的扩展性,排查问题也比Join容易
         2.用IN查询MYSQL内部会排序,按索引树找数据,提高性能,而使用Join可能重复遍历数据查找
    注意：MYSQL对IN没有数量限制,但是限制了SQL语句最大是1M,可以通过参数配置
18.分表和分区的区别
    相同点都是为了提高数据库的并发量
    分表：将一个表拆分多个表
    分区：还是一个表但是将数据分区,比如按时间分区,查询的时候只查询某一区块来提高性能
19.ElasticSearch是什么？应用场景是什么？
    数据库如果数据量大时采用模糊查询会出现严重的性能问题,通过引入ES来解决性能问题
    优势： 1.分布式场景下将请求分布在多个节点  2.内置冗余副本,防止宕机导致数据丢失  3.提供聚合分析等功能,可以对海量数据进行秒级别分析
    场景： 电商网站、新闻网站使用较多
20.什么是全文检索、倒排索引
    全文检索：通过传入值查询所有数据返回结果
    倒排索引：将传入值拆分成关键字,通过倒排序匹配结果返回  例如：夏烦恼  --》响应 夏洛特烦恼







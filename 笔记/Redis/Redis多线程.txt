1. Redis6.0之前的版本真的是单线程吗？
    Redis持久化,集群都是多线程处理的,只不过核心处理逻辑是单线程执行
2. Redis6.0之前为什么一直不使用多线程？
    因为Redis受限于网络和内存,cpu并不是瓶颈,而且操作很快,几乎不占用cpu,所以采用单线程,并且多线程可能需要加锁,上下文切换会降低性能
3.Redis6.0为什么要引入多线程呢？
    随着互联网的发展,对缓存性能要求越来越高,所以引入多线程来处理网络读写和数据解析,提高网络IO性能。执行命令依旧采用单线程所以没有线程安全问题
        1.提高网络IO性能,使用DPDK来替代内核网络栈方式、零拷贝技术
        2.引入多线程利用多核提高并发
4.Redis6.0默认是否开启了多线程？
    默认不开启,需要通过配置文件开启并设置线程数,线程数推荐小于CPU个数,否则会进行上下发切换降低效率,官方认为线程数超过8就没有意义了
5.Redis6.0采用多线程后，性能的提升效果如何？
    看过一篇帖子,在4线程IO时相比单线程几乎是翻倍,四核机器设置2或3,八核机器设置6
6.Redis6.0多线程的实现机制？ 特点:多线程要么同时进行读,要么同时处理写,不会同时处理读写
    单线程：多个客户端请求-》多路复用IO-》放到等待队列解析请求-》数据库操作-》等待队列响应请求-》返回客户端
    多线程：多个客户端请求-》多路复用IO-》请求分发多线程解析-》数据库操作-》响应交给多线程回写-》返回客户端
7.Redis线程中经常提到多路复用IO,如何理解？
    每一次Socket都会生成一个文件描述符(FD),通过多路复用IO函数注册到队列中,分给给事件处理器执行
    1.Redis常见多路复用函数： 具体通过时间复杂度最小进行选用
        1.select(备选方案)
            1.最大处理1024个客户端  2.就绪后用户需要遍历所有socket所以时间复杂度O(n)
        2.poll
            1.本质就是select,解决了只能处理1024个客户端的问题,但是就绪后用户需要遍历所有socket所以时间复杂度O(n)
        3.epoll
            1.就绪后event事件通知机制,将就绪socket加入队列,所以不需要遍历所有socket
        总结：epoll目前最常用的多路复用函数,Redis、Nginx、Java的NIO都是使用epoll
8.Redis6.0与Memcached多线程模型对比：
    1.Redis支持多种数据结构,具备持久化和容灾恢复能力,redis6.0引入多线程性能和Memcached差不多,支持LFU和LRU拒绝策略,采用定时和惰性删除
    2.Memcached支持普通key value格式,不具备容灾恢复能力,无持久化,只支持惰性删除和LRU拒绝策略

DPDK
    应用程序处理数据包方案,主要技术(用户态、轮询代替中断、零拷贝、网卡RSS、访存DirectIO)
内核协议栈（中断模式）
    网卡收到数据包通知CPU中断处理数据包,如果目标是本机Socket将数据包拷贝到用户内存,
    缺点： 1.如果大量数据到达可能导致系统崩溃    2.需要将包从内核缓存拷贝到用户缓存,带来CPU和内存开销
DPDK模式
    收到包不中断通知CPU,通过内核旁路协议栈绕过内核协议栈,并通过零拷贝降低性能开销,让应用系统通过DPDK提供接口直接访问数据包
    缺点： 1.实现过程复杂并且需要硬件和内核支持

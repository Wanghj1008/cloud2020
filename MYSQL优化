MYSQL 高级
MYSQL优化分析：
  一、数据库设计
    1.合理使用三大范式。如可以提高效率可以适当降低范式.包保留适当冗余
        第一范式：原子性。字段不可再分
        第二范式：唯一性。记录要有唯一标识。一般是设计主键
        第三范式：去冗余。去重多表中重复字段
    2.合理创建 主键、外键、实体之间关系(一一,一多)
  二、sql语句本身的优化
    1.如何定位效率低的SQL
        1.慢查询日志      1.修改配置文件My.ini文件增加,在mysqlId中2,3,4
           1.5.5默认未开启,需要手动开启,如果不是调优需要,一般不建议开启。非常耗性能。
             8.0默认开启。可以修改慢查询日志位置。但是重启失效。如果要重启有效可以配置 my.ini文件设置慢日志位置
           1.了解各种SQL的执行频率 show [session|global] status    session表示当前会话的所有sql   global表示上次启动至今的所有sql
           2.show variables like 'long_query_time'  查看慢查询默认允许时间    set 【global】long_query_time=1 修改全局时间超过1不包括1
           3.SET GLOBAL log_output = 'FILE,TABLE';  默认为文件 如果改成表则记录在mysql数据库 slow_log表中
           4.show variables like 'slow_query_log'   查看慢查询是否开启   set global slow_query_log='on' 设置开启。必须为全局不是session
           5.SHOW VARIABLES LIKE '%slow_query_log_file%' 查看慢查询日志的保存位置
           6.select * from mysql.slow_log 查看mysql数据库的慢查询记录
           7.show session status like 'com_select'  查看查询 update和delete  的次数
           8.显示慢查询次数  show status like ‘slow_queries’;
           9.show status like ‘uptime’ 当前启动时间
           10.日志分析工具mysqlDumpSlow：命令 mysqldumpslow --help
                1.-s 排序方式  2.-c 访问次数  3.-l锁定时间  4.-r 返回记录 5.-t 查询时间 6.al 平均锁定时间
                7.ar 平均返回记录数 8. at 平均查询时间 9.t 返回前面多少条数据 10.g 后面搭配正则表达式,大小写不敏感
        2.sql_trace：
           1.一般是默认开启。
           2.我们可以设置跟踪开启,停止,可以查看跟踪信息.默认生成5个跟踪文件,重启或达到最大值(文件都满了)会重新生成.删除最早的文件
        3.show profiles：  默认不开启
           1. show profiles   查看当前会话以产生的所有记录
           2.show profile for query 2;     可以根据query_ID查看具体的sql分析
           3.show 【cpu,IO】 for query 2;     可以根据query_ID查看具体的sql分析
  三、数据库分表分库
  四、
  五、数据库读写分离
  六、存储过程
    1.合理使用存储过程也能提高性能，但存储过程的缺陷是SQL语句是死的。
  七、配置MySQL本身参数
    1.可以适当调大sort_buffer_size内存的大小
    2.可以适当调大max_length_for_sort_date。
    3.适当提高最大连接数 show variables like '%max_connections%'; 高占用内存也大所以适当
  八、清理碎片化
  九、选择合适的存储引擎
  十、表中的数据  https://blog.csdn.net/weixin_28951347/article/details/113157642
  Mysql架构有点：插件式的存储引擎,将查询处理和其他系统任务以及实现数据的读写分离,可以根据业务需求选择存储引擎
  Mysql架构：
        连接层：连接处理,授权认证,引入了线程池的概念
             1.connector：连接层，JDBC，pathon，PHP
             2.connectionPool：连接池。
        业务逻辑处理层：预处理,解析器,优化器,缓存
             1.Management sevice utils：数据库管理工具：备份,容灾恢复，集群
             2.sql Interface:sql实例。存储过程,视图，触发器，DML，DDL
             3.parser解析转换：查询的事务，对象的权限。
             4.optimizer优化：会对写的sql进行优化重排
             5.cache&缓存和缓冲：
        数据存储引擎层：   负责数据的读写,服务器通过API接口进行通讯 。不同的引擎具有不同的功能
             1.mysql支持多种存储引擎  常用的就是Myisam和innodb
        文件存储层：将数据存储在文件系统上
             1.file system 文件系统和 文件日志 logs
  存储引擎：    Mysql命令查询引擎  ： show variables like ‘%storage_engine%’
        默认Innodb：支持事务,有外键,行锁（适合高并发）    缓存索引和数据,对内存要求较高  表空间大  关注点：事务          都是默认安装的
        MyIASM：不支持事务,不支持外键,表锁               只缓存索引                     表空间小  关注点：性能高,因为对内存要求低
 -------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------
索引优化：
  什么是索引？索引是一种排好序的数据结构,帮助MYSQL高效获取数据
              索引本身也很大,不可能全部存储在内存中,因此索引往往以索引文件的形式存储在磁盘上
     优势：1.提高数据检索效率,降低数据库IO成本
           2.通过索引对数据进行排序,降低排序成本,降低CPU消耗
     略势：1.索引实际也是一张表,保存了主键和索引字段,并指向实体表数据.所以索引也要占用空间
           2.虽然提高了查询的速度,但是降低了更新速度》因为更新表,不仅保存数据,还要保存索引,还可能调整索引的键值变化后的信息
           3.索引只是提高效率的一个因素.如果有大量数据表.就需要花时间建立最优的索引.或者优化查询
  索引分类：
     1.单值索引：一个索引只包含单个列,一张表可以建立多个单值索引。但是一般不会超过5个
     2.唯一索引：索引列的值必须唯一,但允许有空值 unique
     3.复合索引：一个索引包含多个列
            1.创建索引：create 【unique】 index  索引名  on   表(字段名)
            2.删除索引：drop  index  索引名  on  表名
            3.查看所有：show  index  from  表名
  索引结构：
     1.BTree索引
            1.3层的B+数可以表示上百万条数据。所以最高需要三次IO。提高查询性能
     2.Hash索引
     3.full-text全文索引
     4.R-Tree索引
  那些情况下建立索引：
     1.主键自动建立唯一索引：
     2.频繁作为查询的字段应该创建索引
     3.查询中与其他表关联的字段,外键建立索引
     4.查询排序中的字段,排序字段若通过索引去访问将提高速度
     5.查询中统计或者分组字段
  哪些情况下不用索引：
     1.频繁更新的字段不适合创建索引。因为更新字段同时同时需要更新索引。
     2.where条件里用不到的字段不需要创建索引
     3.表记录太少    超过300w  MYSQL性能开始下降 可以考虑索引
     4.数据重复且分布平均的表字段  比如说性别  高度重读 创建索引没有什么效果
  如何选择：
     1.单值索引和组合索引选择？高并发下倾向创建组合索引
     2


优化分析：
  1.sql慢问题：
     1.sql写的不好.连接多而且没有建索引或者没用索引
     2.索引失效。 单值索引 create index inx_user_name on user(name)  复合索引 create index inx_user_name on user(name,Email)
  2.执行或等待时间长问题：
     1.关联查询太多join(设计缺陷或不得已的需求)
     2.服务器调优及参数设置(缓冲、线程数)不恰当
常见的Join查询
  sql执行顺序：
     1.人写的 select distinct * from  表名  join 表  where 条件  group 分组 having分组后筛选  order 排序  limit 分页
     2.机读 from 连接条件 连接表 where条件 分组 分组后筛选 查询想要的字段  去重  排序  分页
  七种连接：1.左全部            select  *  from a  left join b on a.id=b.id
            2.右全部 左连接     select  *  from a  right join b on a.id=b.id
            3.交叉部分：        select  *  from a  inner join b on a.id=b.id
            4.左表去右表交叉    select  *  from a  left join b on a.id=b.id  where b.id is  null
            5.右表去左表交叉    select  *  from a  right join b on a.id=b.id  where a.id is  null
            6.全连接       select  *  from a  full join b on a.id=b.id    但是可以使用联合查询 union 将1，2 连接  自动去重
            7.全连接去重复   select  *  from a  full join b on a.id=b.id where a.id is null or b.id is null 或者 union 将4 5连接
性能分析：
         1.优化器：sql进来先进行语法分析,然后语义检查不合法报错,sql优化,可能会调整SQL顺序
         2.MYSQL的常见瓶颈：
            1.CPU：数据装入内存和从磁盘上读取数据的时候会发送cpu饱和   CPU负担重
            2.IO：磁盘I/O瓶颈发生在装入数据大于内存容量的时候          IO负担重
            3.服务器硬件性能瓶颈                                      服务器硬件配置瓶颈
            查看性能状态方式：top 、free 、 ioStat 和vmStat
         3.Explain： explain + SQL语句
            1.使用explain关键字可以模拟优化器执行SQL语句,从而知道MYSQL是如何处理你的SQL语句。分析语句是否存在瓶颈
            2.使用explain 的查询结果字段分析
                1.id:select 查询的序列号,包含一组数字,表示查询中执行select子句或者操作表的顺序
                    1.id相同：执行顺序由上至下
                    2.id不同：如果是子查询,id的序号会递增,id值越大优先级越高,越先被执行
                    3.id相同不同都有：id大的先执行。id一样的顺序执行
                2.select_type  查询的类型,主要用来区别  普通查询、联合查询、子查询等复杂查询
                    1.SIMPLE：简单的查询,不包含子查询和union联合查询
                    2.Primary：查询中如果包含子查询，最外层的查询被标记为 Primary
                    3.subQuery：在select或者where列表中 被包含的子查询
                    4.derived：from中包含的子查询被标记为衍生表,会把查询结果放在一个临时表
                    5.union：第二个select出现在union之后.被标记为联合。若union包含在from子句的子查询中,外层的select将被标记为4.衍生表
                    6.union result：使用union产生的结果集
                3.table：显示这一行数据是来自那个表
                4.type：访问类型排列   最好到最差   system》const》eq_ref》ref》range》index》all  查询最少到range级别  最好到ref
                    1.system：表只有一行记录(等于系统表)。是const特例  平时不会出现  可以忽略
                    2.const：通过索引一次就找到了,const用于比较主键索引和唯一索引。
                             因为只匹配一行,所以很快将主键至于where条件中,Mysql能将该查询转换为一个常量
                    3.eq_ref：唯一性索引扫描,对于每个索引键,表中只有一条记录匹配。常见于主键或者唯一索引扫描
                    4.ref：非唯一的索引扫描,返回匹配单独值的所有行
                    5.range：只检索指定范围的行,使用一个索引来选择行,key列显示使用了那个索引    一般就是>、<  、between and 、in
                    6.index：全索引扫描。只遍历索引树
                    7.all：遍历全表查询数据
                5.possible_keys：显示可能应用在这张表中的索引,一个或者多个，但是不一定被实际使用到
                6.key：实际使用的索引  如果为null则没有使用
                    1.覆盖索引：我使用1,2两个字段创建索引,而查的也是12字段。不需要通过索引去查找其他信息就是覆盖索引
                7.key_len：表示索引中使用的字节数,    相同结果下 key_len越小越好
                8.ref：就是你的条件后面的值。没有=null  有的话分常量const  和  对于值的库 表 字段名
                9.rows：读取行数
                10.extra额外：包含不适合再其他列显示 但是十分重要的额外信息
                    1.using fileSort：无法利用索引完成排序操作,而是使用了一个外部排序。叫文件排序  常见：group by与组合索引个数 顺序不吻合
                    2.using temporary：mysql对结果排序使用了临时表。常见于 order by、group by。
                    3.using index：如果同时出现了using where 说明索引被用来执行查找。没有出现using where 说明索引用来读取数据 而不是查找数据
                    4.using where 表示使用了where条件
                    5.user joinbuffer：使用了连接缓存
                    6.impossible where：where条件不可能成立   name=王昊杰 and  name=王洁
         4.Explain的作用
            1.通过查询的结果id可以判断表的加载顺序
            2.通过select_type可以判断查询语句有哪些操作类型   union、子查询 等
            3.判断哪些索引可以使用
            4.判断哪些索引被实际使用了
            5.通过ref可以判断表之间的引用
            6.通过rows每张表有多少行被查询出来
索引优化：
    1.索引分析：
        1.单表：
        2.两表：左连接索引建右表,右连接索引建左表
        3.三表：根据2的结论一步一步加两个索引。1lef join2  left join3   现在2被查询条件加索引,然后在3被查询条件加索引
    2.避免索引失效：    索引理想状态：全值匹配
        1.最佳左前缀法则：如果索引了多列,要遵守最左法则,查询从索引最左开始,并且不能跳过列。如果跳过按照最短匹配计算
        2.不要在索引列上做任何操作。(计算,函数,自动或者手动类型转换),会导致索引失效从而扫描全表
        3.在索引上使用范围。范围后面的会失效。范围会使用
        4.使用like模糊查询 百分号只能加右边。左边会失效。解决方案就是用覆盖索引查询。
        5.！=和 is null 和is not null也无法使用索引。
        6.字符串不加单引号会导致索引失效。其实相当于隐式类型转换
        7.少用or  用它会索引失效
        8.小表驱动达标。子查询小用in  主查询小用exists  in先走子查询。exists先走主查询
        9.not in 不使用索引。not exists可以部分使用索引 所以推荐使用not exists
    3.常见问题：
        1.分组之前会排序,如果顺序错乱会产生using filesort和临时表
        2.order by按顺序可以使用索引。不按顺序会出现file sort
    4.一般建议：
        1.对于单值索引,尽量选择针对当前索引过滤性更好的索引
        2.在选择组合索引的时候,尽量按顺序写索引字段进行查找
        3.
Order by优化：
    1.order by 子句使用最左前列。或者搭配where 满足最左前列都可以使用using index 否则会产生文件外排序
    2.如果使用using fileSort有两种算法
        实现原理：将数据拿到内存排序区进行排序。如果内存装不下会进行数据分块,再对各数据块进行排序.最后将各个数据块合并成一个结果集
        1.双路算法：首先从磁盘读取主键和排序字段,在内存进行排序,在通过排序好的ID读取磁盘,返回数据
        2.单路算法：从磁盘读取所有需要的列,在内存进行排序,然后将结果返回.避免二次操作磁盘。
        问题：当内存不够放所有数据,单路和双路都可能变成多路 。  单路算法更容易超过内存
        解决方案：
            1.使用order by 最好不要使用select *
            2.可以适当调大sort_buffer_size内存的大小。要根据系统能力适当增大,因为是针对每个线程的
            3.可以适当调大max_length_for_sort_date。提高这个参数会增加用单路概率,但是设置太高会提高超过内存最大值.进行多路算法
        使用了多路算法的明显症状是：高磁盘I/O活动和低的CPU使用率
    开启了binlog日志,mysql默认不允许创建函数。 将默认开启
    show variables like 'log_bin_trust_function_creators'
    SET GLOBAL log_bin_trust_function_creators = 1;